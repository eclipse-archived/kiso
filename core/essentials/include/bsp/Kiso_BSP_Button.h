/********************************************************************************
* Copyright (c) 2010-2019 Robert Bosch GmbH
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0.
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*    Robert Bosch GmbH - initial contribution
*
********************************************************************************/

/**
 * @file
 * @defgroup    KISO_HAL_BSP_Button Button
 * @ingroup     KISO_HAL_BSP_IF
 * @{
 *
 * @brief       BSP API for button
 *
 * @details
 * After reset, the microcontroller GPIOs are mostly tristated. Once the button is requested a call to
 * BSP_Button_Connect() function is required to map its GPIOs to their desired input function.
 *
 * A call to BSP_Button_Enable() will enable interrupting the microcontroller on button press/release events.
 *
 * BSP_Button_Disable() will disable interrupting the microcontroller.
 *
 * BSP_BT_EM9301_Disconnect() will put the GPIO pins to the lowest power consumption and risk free configuration.
 * e.g. high impedance. 
 *
 * The following diagram describes the states and transitions for the button:
 * @dot
 * digraph state_diagram {
 *      INIT[color="blue", shape=record]
 *      INIT -> CONNECTED[style="dashed", label="BSP_Button_Connect()"]
 *      CONNECTED -> DISCONNECTED [label="BSP_Button_Disconnect()"]
 *      DISCONNECTED -> CONNECTED [label="BSP_Button_Connect()"]
 *      CONNECTED -> ENABLED [label="BSP_Button_Enable()"]
 *      ENABLED -> DISABLED [label="BSP_Button_Disable()"]
 *      DISABLED -> ENABLED [label="BSP_Button_Enable()"]
 *      DISABLED -> DISCONNECTED [label="BSP_Button_Disconnect()"]
 *  }
 * @enddot
 */

#ifndef KISO_BSP_Button_H
#define KISO_BSP_Button_H

#include "Kiso_HAL.h"

/* Code is only effective if feature is enabled in configuration */
#if KISO_FEATURE_BSP_BUTTON

enum Retcode_BSP_Button_E
{
    /** Start of BSP Button return codes */
    RETCODE_BSP_BUTTON_ENABLED = RETCODE_FIRST_CUSTOM_CODE,
    RETCODE_BSP_BUTTON_INTERRUPT_BUSY,
    RETCODE_BSP_BUTTON_INTERRUPT_CONFIGURED,
    /** Put new declarations of component return codes here */
};

/**
 * Enumeration used to report the button logic state (pressed or released).
 */
enum BSP_ButtonStatus_E
{
    BSP_BUTTON_RELEASED = 0, /**< Button is released */
    BSP_BUTTON_PRESSED = 1,  /**< Button is pressed */
    BSP_BUTTON_ERROR = 2,    /**< invalid parameter passed or button not enabled*/
};

/**
 * @brief:      Type definition for the button callback
 *
 * @details:    The application should pass a function pointer of the same signature (**void function(uint32_t)**) to the
 *              BSP_Button_Enable(buttonId) in order to handle interrupts coming from the button line specified
 *              by buttonId.
 */
typedef void (*BSP_Button_Callback_T)(uint32_t event);

/**
 * @brief       Maps the GPIO pins to their desired function.
 *
 * @details     This function once called will map the GPIO pins to their desired functions to drive the device.
 *              Basic IO operations are allowed after the successful execution of this function.
 *
 * @return      RETCODE_OK in the case of success or an error code otherwise.
 */
Retcode_T BSP_Button_Connect(void);

/**
 * @brief       Enables the events generated by the button.
 *
 * @details     This function allows the button interrupts to be processed by the MCU. It associates the callback to the
 *              button so that the function will be executed each time a button interrupt occurs.
 *
 * @pre         BSP_Button_Connect() successfully executed.
 *
 * @param[in]   buttonId: identifier of the button  to be enabled.
 *
 * @param[in]   callback: The function that processes the events genarated by the specified button.
 *
 * @note        The implementation of the callback shall take into account that it is executed interrupt context.
 *
 * @return      RETCODE_OK in the case of success or an error code otherwise.
 */

Retcode_T BSP_Button_Enable(uint32_t buttonId, BSP_Button_Callback_T callback);

/**
 * @brief       Disables the the specified button.
 *
 * @details     This function disables the button and prevent the MCU from processing events related to it.
 *
 * @param[in]   buttonId: identifer of the button to be disabled.
 *
 * @return      RETCODE_OK in the case of success or an error code otherwise.
 */
Retcode_T BSP_Button_Disable(uint32_t buttonId);

/**
 * @brief       Disconnects the button.
 *
 * @details     This function will tristate the GPIOs of the buttons, except if a functional or security or safety
 *              risk opposes that, then it will put them into lowest power consumption safest configuration.
 *
 * @return      RETCODE_OK in the case of success or an error code otherwise.
 */
Retcode_T BSP_Button_Disconnect(void);

/**
 * @brief       Returns the current state of the button
 *
 * @details     This function assesses the input pin of the button and returns its state pressed or released.
 *
 * @param[in]   buttonId : button identifier.
 *
 * @return      State of the button -1 for error, 0 for released, 1 for pressed.
 */
uint32_t BSP_Button_GetState(uint32_t buttonId);

#endif /* KISO_FEATURE_BSP_BUTTON */

#endif /* KISO_BSP_Button_H */

/**  @} */
