/*******************************************************************************
 * Copyright (c) 2010-2019 Robert Bosch GmbH
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *
 ******************************************************************************/

/**
 * @brief App config header
 *
 * @details
 * ```
 *    ______ _____   _   _ _____ _____  ___  ______________ _____________   __
 *    |  _  \  _  | | \ | |  _  |_   _| |  \/  |  _  |  _  \_   _|  ___\ \ / /
 *    | | | | | | | |  \| | | | | | |   | .  . | | | | | | | | | | |_   \ V /
 *    | | | | | | | | . ` | | | | | |   | |\/| | | | | | | | | | |  _|   \ /
 *    | |/ /\ \_/ / | |\  \ \_/ / | |   | |  | \ \_/ / |/ / _| |_| |     | |
 *    |___/  \___/  \_| \_/\___/  \_/   \_|  |_/\___/|___/  \___/\_|     \_/
 *
 *
 *     _____ _   _ _____ _____   _   _  _____  ___ ______ ___________ _
 *    |_   _| | | |_   _/  ___| | | | ||  ___|/ _ \|  _  \  ___| ___ \ |
 *      | | | |_| | | | \ `--.  | |_| || |__ / /_\ \ | | | |__ | |_/ / |
 *      | | |  _  | | |  `--. \ |  _  ||  __||  _  | | | |  __||    /| |
 *      | | | | | |_| |_/\__/ / | | | || |___| | | | |/ /| |___| |\ \|_|
 *      \_/ \_| |_/\___/\____/  \_| |_/\____/\_| |_/___/ \____/\_| \_(_)
 * ```
 *
 * This file is managed through cmake! The <headername>.h.in file acts as the
 * template for generating the "real" header during cmakes' configure stage.
 * This generated header will be placed in your CMAKE_CURRENT_BINARY_DIR and
 * included during building.
 *
 * In the template we refer to cmake variables through ${XYZ} or @XYZ@ notation.
 * Any such occurrence will be populated by cmake with the coresponding variable
 * value.
 *
 * The intended way of modifying values in this header is:
 *  A) Through the <headername>.cmake file located either in either the boards'
 *     or the apps' config folder.
 *  B) Through command line options such as:
 *     `$ cmake --build <BUILD_DIR> -D <VAR>=<VAL>`
 *     Where <VAR> is the name of a cmake variable and <VAL> it's associated
 *     value.
 */

#ifndef APPCONFIG_H_
#define APPCONFIG_H_

// clang-format off
#define APP_CMDPROCESSOR_MAIN_PRIORITY (UINT32_C(${APP_CMDPROCESSOR_MAIN_PRIORITY}))
#define APP_CMDPROCESSOR_MAIN_STACKSIZE (UINT16_C(${APP_CMDPROCESSOR_MAIN_STACKSIZE}))
#define APP_CMDPROCESSOR_MAIN_QLEN (UINT32_C(${APP_CMDPROCESSOR_MAIN_QLEN}))

#define APP_TASK_APP_PRIORITY (UINT32_C(${APP_TASK_APP_PRIORITY}))
#define APP_TASK_APP_STACKSIZE (UINT16_C(${APP_TASK_APP_STACKSIZE}))

#define APP_NUMBER_OF_RETRIES (UINT32_C(${APP_NUMBER_OF_RETRIES}))
#define APP_SIM_PIN (${APP_SIM_PIN})
#define APP_RAT (${APP_RAT})
#define APP_APN_NAME ("${APP_APN_NAME}")
// clang-format on
#define APP_APN_AUTHMETHOD (CELLULAR_APNAUTHMETHOD_NONE) /* Currently the only supported option */
#define APP_APN_USER (NULL)                              /* Currently the only supported option */
#define APP_APN_PASSWORD (NULL)                          /* Currently the only supported option */
// clang-format off
#define APP_DNS_TEST_FQDN ("${APP_DNS_TEST_FQDN}")
#cmakedefine APP_UDP_TEST_FQDN ("${APP_UDP_TEST_FQDN}")
// clang-format on
#ifndef APP_UDP_TEST_FQDN
// clang-format off
#define APP_UDP_TEST_IP (${APP_UDP_TEST_IP})
// clang-format on
#endif
// clang-format off
#define APP_UDP_TEST_PORT (UINT16_C(${APP_UDP_TEST_PORT}))
#define APP_UDP_TEST_DATA ("${APP_UDP_TEST_DATA}")
#cmakedefine APP_TCP_TEST_FQDN ("${APP_TCP_TEST_FQDN}")
// clang-format on
#ifndef APP_TCP_TEST_FQDN
// clang-format off
#define APP_TCP_TEST_IP (${APP_TCP_TEST_IP})
// clang-format on
#endif
// clang-format off
#define APP_TCP_TEST_PORT (UINT16_C(${APP_TCP_TEST_PORT}))
#define APP_TCP_TEST_DATA ("${APP_TCP_TEST_DATA}")
// clang-format on

#endif
