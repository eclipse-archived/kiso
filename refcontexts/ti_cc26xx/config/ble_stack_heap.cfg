/* Heap Configuration defines the type of Heap you want to use for the system (application + Stack)
* Only one Heap buffer will be allocated. This heap will be shared by the system and the stack through one manager (HeapMem, HeapMem+HeapTrack or OSAL)
* You can still decide to create several heaps if you want, but at least one heap needs to be created.
* The stack must have a Heap to run.
* The different Heap manager available are :
* OSAL HEAP: legacy Heap manager provided with all BLE sdk. By default, this Heap manager is used.
* HeapMem:Â  heap manager provided by TI-RTOS (see TI-RTOS user guide for properties)
* HeapTrack: module on top of HeapMem allowing an easy debugging of memory allocated through HeapMem.

* The heap manager to use is selected by setting  HEAPMGR_CONFIG to the corresponding value (see below)
* 0    = osal Heap manager, size is static.
* 0x80 = osal Heap manager, with auto-size: The remainning RAM (not used by the system) will be fully assign to the Heap.
* 1    = HeapMem with Static size
* 0x81 = HeapMem with auto-size. The remainning RAM (not used by the system) will be fully assign to the Heap.
* 2    = HeapTrack (with HeapMem) with fixe size
* 0x82 = HeapTrack (with HeapMem) with auto-size: The remainning RAM (not used by the system) will be fully assign to the Heap.
*
* If HEAPMGR_CONFIG is not defined, but the configuration file ble_stack_heap.cfg is used, then the value HEAPMGR_CONFIG = 0x80 is assumed.
* If HEAPMGR_CONFIG is not defined, and the file ble_stack_heap.cfg is not used, then the value HEAPMGR_CONFIG = 0x80 is assumed and the default Heap size will be 3072
* unless you define HEAPMGR_SIZE to a different value in the project option (0 meaning auto-size).
*
* From the configuration below, two #define will be created that will be used by the application to setup the Heap:
* #define HEAPMGR_SIZE
* #define HEAPMGR_CONFIG
* In order to use those define, this include line needs to be added: #include <xdc/cfg/global.h>
*
* In order for the auto-size Heap to work, the following symbol needs to be created by the linker:
*  heapStart
*  heapEnd
*
*/
/* DISCLAIMER: The HeapMem module in ROM can only use a GateMutex module. This means the malloc() function cannot be used in a Hwi/Swi.
     This means also that other access to the heap, with Icall_alloc for example, can potentially break the Heap...
     Therefore this solution is most effective when TI-RTOS is located in FLASH, so that a GateHwi can be used.
     If you try to use it in ROM, a workaround using HeapCallback is used, which will degrade performance. */
var Memory = xdc.useModule('xdc.runtime.Memory');
var HEAPMGR_CONFIG = 0x80;
var HEAPMGR_SIZE   = 0x00; //only valid if static size is used. This is the size of the buffer allocated for Heap.

if  (typeof HEAPMGR_CONFIG == 'undefined' )
{
  var HEAPMGR_CONFIG = 0x80;
}

// The following will create the #define HEAPMGR_CONFIG. It can then be used by include  <xdc/cfg/global.h>
Program.global.HEAPMGR_CONFIG = HEAPMGR_CONFIG;

if  (typeof HEAPMGR_CONFIG != 'undefined' && ( HEAPMGR_CONFIG == 1 || HEAPMGR_CONFIG == 0x81))
{
  if (typeof NO_ROM == 'undefined' || (typeof NO_ROM != 'undefined' && NO_ROM == 0))
  {
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();

    if (typeof HEAPMGR_CONFIG == 'undefined' || (typeof HEAPMGR_CONFIG != 'undefined' && HEAPMGR_CONFIG == 0x1))
    {
      heapMemParams.size = HEAPMGR_SIZE;
      Program.global.HEAPMGR_SIZE = HEAPMGR_SIZE;
    }
    else
    {
      // if you get an undefined error for the symbol bellow it means that AUTOHEAPSIZE has been defined in the application.
      //
      Program.global.HEAPMGR_SIZE = 0;
      heapMemParams.usePrimaryHeap = true;
      HeapMem.primaryHeapBaseAddr = "&heapStart";
      HeapMem.primaryHeapEndAddr = "&heapEnd";
    }

    Program.global.stackHeap = HeapMem.create(heapMemParams);

    var HeapCallback = xdc.useModule('ti.sysbios.heaps.HeapCallback');
    var params = new HeapCallback.Params();
    params.arg = 1;
    Program.global.heap0 = HeapCallback.create(params);
    HeapCallback.initInstFxn = '&myHeapMemInitFxn';              // Call First When BIOS boot. Initialize the Heap Manager.
    HeapCallback.allocInstFxn = '&myHeapMemAllocFxn';            // Call for allocating a buffer
    HeapCallback.freeInstFxn = '&myHeapMemFreeFxn';              // Call for Freeing a buffer
    HeapCallback.getStatsInstFxn = '&myHeapMemGetStatsFxn';      // Return Statistic on the Heap.
    HeapCallback.isBlockingInstFxn = '&myHeapMemIsBlockingFxn';  // Return TRUE: This heap is always blocking ('Hwi Gate' like )
    Memory.defaultHeapInstance = Program.global.heap0;
  }
  else
  {
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();

    if (typeof HEAPMGR_CONFIG == 'undefined' || (typeof HEAPMGR_CONFIG != 'undefined' && HEAPMGR_CONFIG == 0x1))
    {
      heapMemParams.size = HEAPMGR_SIZE;
      Program.global.HEAPMGR_SIZE = HEAPMGR_SIZE;
    }
    else
    {
      // if you get an undefined error for the symbol bellow it means that AUTOHEAPSIZE has been defined in the application.
      Program.global.HEAPMGR_SIZE = 0;
      heapMemParams.usePrimaryHeap = true;
      HeapMem.primaryHeapBaseAddr = "&heapStart";
      HeapMem.primaryHeapEndAddr = "&heapEnd";
    }
    Program.global.stackHeap = HeapMem.create(heapMemParams);
    var GateHwi = xdc.useModule('ti.sysbios.gates.GateHwi');
    HeapMem.common$.gate = GateHwi.create();
    Memory.defaultHeapInstance = Program.global.stackHeap;
  }
}
else if (typeof HEAPMGR_CONFIG != 'undefined'  && ( HEAPMGR_CONFIG == 2 || HEAPMGR_CONFIG == 0x82))
{
  if (typeof NO_ROM == 'undefined' || (typeof NO_ROM != 'undefined' && NO_ROM == 0))
  {
    // ROM is being used.
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();
    if (typeof HEAPMGR_CONFIG == 'undefined' || (typeof HEAPMGR_CONFIG != 'undefined' && HEAPMGR_CONFIG == 2))
    {
      heapMemParams.size =  HEAPMGR_SIZE;
      Program.global.HEAPMGR_SIZE = HEAPMGR_SIZE;
    }
    else
    {
      // if you get an undefined error for the symbol bellow it means that AUTOHEAPSIZE has been defined in the application.
      //
      heapMemParams.usePrimaryHeap = true;
      HeapMem.primaryHeapBaseAddr = "&heapStart";
      HeapMem.primaryHeapEndAddr = "&heapEnd";
      Program.global.HEAPMGR_SIZE = 0;
    }

    var tempHeap = HeapMem.create(heapMemParams);

    var HeapTrack = xdc.useModule('ti.sysbios.heaps.HeapTrack');
    var heapTrackParams = new HeapTrack.Params();
    heapTrackParams.heap = tempHeap;
    Program.global.stackHeap = HeapTrack.create(heapTrackParams)

    var HeapCallback = xdc.useModule('ti.sysbios.heaps.HeapCallback');
    var params = new HeapCallback.Params();
    params.arg = 1;
    Program.global.heap0 = HeapCallback.create(params);
    HeapCallback.initInstFxn = '&myHeapTrackInitFxn';              // Call First When BIOS boot. Initialize the Heap Manager.
    HeapCallback.allocInstFxn = '&myHeapTrackAllocFxn';            // Call for allocating a buffer
    HeapCallback.freeInstFxn = '&myHeapTrackFreeFxn';              // Call for Freeing a buffer
    HeapCallback.getStatsInstFxn = '&myHeapTrackGetStatsFxn';      // Return Statistic on the Heap.
    HeapCallback.isBlockingInstFxn = '&myHeapTrackIsBlockingFxn';  // Return TRUE: This heap is always blocking ('Hwi Gate' like )
    Memory.defaultHeapInstance = Program.global.heap0;
  }
  else
  {
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();
    if (typeof HEAPMGR_CONFIG == 'undefined' || (typeof HEAPMGR_CONFIG != 'undefined' && HEAPMGR_CONFIG == 2))
    {
      heapMemParams.size =  HEAPMGR_SIZE;
      Program.global.HEAPMGR_SIZE = HEAPMGR_SIZE;
    }
    else
    {
      // if you get an undefined error for the symbol bellow it means that AUTOHEAPSIZE has been defined in the application.
      //
      heapMemParams.usePrimaryHeap = true;
      HeapMem.primaryHeapBaseAddr = "&heapStart";
      HeapMem.primaryHeapEndAddr = "&heapEnd";
      Program.global.HEAPMGR_SIZE = 0;
    }

    var tempHeap = HeapMem.create(heapMemParams);

    var GateHwi = xdc.useModule('ti.sysbios.gates.GateHwi');
    HeapMem.common$.gate = GateHwi.create();

    var HeapTrack = xdc.useModule('ti.sysbios.heaps.HeapTrack');
    var heapTrackParams = new HeapTrack.Params();
    heapTrackParams.heap = tempHeap;
    Program.global.stackHeap = HeapTrack.create(heapTrackParams)
    Memory.defaultHeapInstance = Program.global.stackHeap;
  }
}
else if (typeof HEAPMGR_CONFIG != 'undefined'  && ( HEAPMGR_CONFIG == 0 || HEAPMGR_CONFIG == 0x80))
{

  var HeapCallback = xdc.useModule('ti.sysbios.heaps.HeapCallback');
  var params = new HeapCallback.Params();
  params.arg = 1;
  Program.global.heap0 = HeapCallback.create(params);
  HeapCallback.initInstFxn = '&osalHeapInitFxn';              // Call First When BIOS boot. Initialize the Heap Manager.
  HeapCallback.allocInstFxn = '&osalHeapAllocFxn';            // Call for allocating a buffer
  HeapCallback.freeInstFxn = '&osalHeapFreeFxn';              // Call for Freeing a buffer
  HeapCallback.getStatsInstFxn = '&osalHeapGetStatsFxn';      // Return Statistic on the Heap.
  HeapCallback.isBlockingInstFxn = '&osalHeapIsBlockingFxn';  // Return TRUE: This heap is always blocking ('Hwi Gate' like )
  //HeapCallback.createInstFxn = '&osalHeapCreateFxn';        // Not Supported
  //HeapCallback.deleteInstFxn = '&osalHeapDeleteFxn';        // Not supported
  Memory.defaultHeapInstance = Program.global.heap0;

  if (typeof HEAPMGR_CONFIG == 'undefined' || (typeof HEAPMGR_CONFIG != 'undefined' && HEAPMGR_CONFIG == 0))
  {
    // the following definition will create the #define HEAPMGR_SIZE ,
    // which is used by thestack to have information about the heap manager size.
    // if set to 0, this imply auto-size heap
    Program.global.HEAPMGR_SIZE = HEAPMGR_SIZE;
  }
  else
  {
    // the following definition will create the #define HEAPMGR_SIZE ,
    // which is used by the stack to have information about the heap manager size.
    // if set to 0, this imply auto-size heap
    // The heap buffer will be created automaticaly by using all the remaiing RAM available at the end of the build/link.
    // For this, 2 symbole needs to be created by teh linker file: heapStart and heapEnd
    Program.global.HEAPMGR_SIZE = 0;
  }
}

