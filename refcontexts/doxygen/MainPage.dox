/** 
 @{

@mainpage	Connected Sensors Platform (CoSP)

@author		Bosch Connected Devices and Solutions GmbH

@section	COSP_SECTION_INTRODUCTION	Introduction to CoSP

@subsection	COSP_SUBSECTION_SW_ARCHITECTURE	Overview of Software Architecture

@image html CospComponentView.png

@subsection COSP_SUBSECTION_LAYERS Main Software Layers
 
@subsubsection COSP_SUBSUBSECTION_EMBEDDED_APP Embedded Application

The embedded application shall provide the main high-level business logic. As such it is the main user of the CoSP packages.  

@subsubsection COSP_SUBSUBSECTION_PROTOCOL_STACKS Protocol Stacks

- Bosch ServalStack
- Alpwise BLE
- Semtech LoRaWAN
- TI SimpleLink Wi-Fi
- ...

@subsubsection COSP_SUBSUBSECTION_DRIVERS_LAYER Drivers

CoSP contains a collection of 3rd party and own device drivers.

@subsubsection COSP_SUBSUBSECTION_HAL Hardware Abstraction Layer

The hardware abstraction layer provides common interfaces for the usage of MCU components like  `SPI`, `UART`, `I2C`  which are used by the device drivers.

HAL includes also MCU specific realizations of these interfaces for EFM32 Giant Gecko, STM32L4 and TI CC26xx micro controllers.

HAL is responsible to:
  - Provide common interfaces for the usage of MCU components like SPI, I2C, UART.
  - Handles IRQ communication events delegated by the BSP.
  - Delegates communication events to the higher layers using callbacks.
  - Provides functions to send or receive data from/to connected BSP peripherals.
  - Does not provide any protocol stack related to the usage of connected peripherals. This is up to the middle ware or application layer.

@subsubsection COSP_SUBSUBSECTION_BSP Board Support Package

The board support package or BSP is a user-supplied package which includes the necessary adaptions in order to run on user-supplied hardware.
Each BSP encapsulates the hardware configuration and low level hardware functions for a specific hardware. 
The purpose is to clearly separate the concerns of configuring the hardware (e.g., GPIO pins, clocks, MCU peripherals and  on-board HW components ) from using the hardware. 

The BSP is responsible to:

 - Initialize the MCU and target board (e.g. Clock settings).
 - Configure MCU resources used to connect to on-board hardware peripherals.
 - Manage power states and provide means to control the power consumption of connected on-board hardware peripherals.
 - Install IRQ handlers and delegate IRQ events to either MCU component or higher layer.

Each on board peripheral of a target board has its own software representation in the board support package and each BSP peripheral must have the following common set of interface functions:
  -  Connect()
  -  Enable()
  -  Disable()
  -  Disconnect()
  
These functions are to be used by the higher layer to control the status and power consumption of a peripheral.  

A BSP peripheral takes following states: 

 - Initial
	- The Power-On State.
 - Initialized
	- If enabled in the configuration, the peripheral automatically becomes initialized with a call to BSP_Board_Initialize().
	- The BSP peripheral and also the MCU resource to which it is tied will be on lowest possible power consumption level (a.k.a. OFF).
	- In this state, the peripheral is fully configured but the clock for the resource is disabled.
 - Connected
	- The peripheral will become connected with a call to the peripherals Connect() function.     
	- In this state the link between the peripheral and dedicated MCU resources is established i.e. the peripheral is electrically connected to the MCU but still not fully enabled.  
	- The power consumption will be higher than in initialized or disconnected state.
 - Enabled
    - A call to the peripherals Enable() function will execute necessary actions to fully enable the peripheral.
    - The enable sequence should always take the specifications of the MCU and peripheral vendor into consideration to establish an error free connection.
    - In this state the peripheral will consume the most power because it is fully operational.
 - Disabled
    - A call to the peripherals Disable() function will disable the peripheral.
    - This could be necessary to save power whilst the application is still active and the peripheral is not required.
    - The disable sequence will disable the peripheral and its assigned communication interface if there is any, preventing them from receiving or transmitting any data.
    - The disable sequence will also take the specification of the MCU and peripheral vendor into consideration that must be applied to disable the device without causing errors.
    - The power consumption in this state will be the same like in the connected state.
 - Disconnected
    - A call to the peripherals Disconnect() function will disconnect the peripheral.
    - The disconnect sequence will cut off the electrical link between the MCU and the peripheral such that no power is consumed by it and the dedicated pins on the MCU side.

The advantages of this approch are that:
 - It allows for implicit power consumption optimization.
 - It allows to share resources, as common concepts are used.
 - It eases the development of applications and device drivers.	
	
	
@subsection	COSP_SUBSECTION_SW_PACKAGES	Overview of Software Packages

See <a href="modules.html">Modules</a> page.

@section	BCDS_REFCONTEXTS_LICENSE License for CoSP Software

@copyright
Bosch Connected Devices and Solutions GmbH.\n
All Rights Reserved. Confidential.\n\n
Distribution only to people who need to know this information in order to do their job.(Need-to-know principle).\n
Distribution to persons outside the company, only if these persons signed a non-disclosure agreement.\n
Electronic transmission, e.g. via electronic mail, must be made in encrypted form.\n

@}
*/