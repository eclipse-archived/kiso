### Build environment for the specific associated board ###

[binaries] # cross-compiler to use
c = 'arm-none-eabi-gcc' # Possibility to set here a path to an exe
ar = 'arm-none-eabi-ar' 

[properties] # properties passing as arguments in the different build steps
needs_exe_wrapper = true

project_config = [
	'b_pch=false',
	'b_staticpic=false']

objcopy = 'arm-none-eabi-objcopy'
objcopy_args = [
	'-R', '.usrpg',
	'-O', 'binary']

c_args = [
	'-march=armv7e-m', 
	'-mtune=cortex-m4', 
	'-DGCC_ARMCM4', 
	'-mthumb',
	'-mfloat-abi=softfp', 
	'-mfpu=fpv4-sp-d16', 
	'-std=c99', 
	'-Wall', 
	'-Wextra', 
	'-Wmissing-prototypes', 
	'-Wstrict-prototypes', 
	'-Werror', 
	'-ffunction-sections', 
	'-fdata-sections', 
	'-MMD', 
	'-MP', 
	'-MF', 
	'-O0', 
	'-g']

c_link_args = [
	# printf in nano libc in gcc7 2017-q4-major can't handle all integer widths correctly. 
	# If you want to save some flash space you can try to uncomment this to switch to the nano libc.
	#'--specs=nano.specs',
	'-Xlinker',
	'-Map=out.map',
	'-mthumb', 
	'-mno-thumb-interwork',
	'-march=armv7e-m', 
	'-mtune=cortex-m4',
	'-mfloat-abi=softfp',
	'-mfpu=fpv4-sp-d16',
	'-Wl,--gc-sections', 
	'-Wl,--start-group', 
	'-lgcc', 
	'-lc', 
	'-lnosys', 
	'-lm', 
	'-Wl,--end-group', 
	'-Wl,-u,_printf_float']


[host_machine] # Target machine
system = 'bare'
cpu_family = 'arm'
cpu = 'cortex-m4'
endian = 'little'
device_type = 'stm32'
mcu_family = 'stm32l4'
